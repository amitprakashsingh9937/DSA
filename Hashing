#include<stdio.h>
#include<math.h>
int nearest_prime(int ts)
{
    int i=0,j=0;
    int flag=0;
    for(i=ts;i>=2;i--)
    {
        for(j=2;j<=sqrt(i);j++)
        {
            if(i%j==0)
            break;
        }
   if(j>sqrt(i))
    return i;
   }
   if(flag==1)
        return 0;
   else
    return 1;
}
//*******
int divisionhash(int key,int ts)
{
    int np=0;
    int l=0;
    np=nearest_prime(ts);
    l=key%np;
    return l;
}
//*****
int digitscount(int N)
{
    int c=0;
    while(N!=0)
    {

        c++;
        N=N/10;

    }
    return c;
}
int midsquarehash(long long N,int ts)
{
    int d=digitscount(ts-1);
    int l=digitscount(N);
    int e=(2*l-d)/2;
    int r=pow(10,e);

    long long square = N * N;
    int hash = (square / r) % ts;
    return hash;
}
//*****
foldinghash(long long N,int ts)
{
    int d=digitscount(ts-1);
    int mod=pow(10,d);
    int sum=0;
    while(N!=0)
    {
        sum=sum+N%mod;
        N=N/mod;
    }
    return sum%ts;
}
//*****
int linearprobing(int table[],int ts,int x)
{
    int m=x%ts;
    int flag=1;
    if(table[m]==0)
        table[m]=x;
    else
    {
        flag=0;
        for(int i=1;i<ts;i++)
        {
            int newpos=(m+i)%ts;
            if(table[newpos]==0)
            {
                table[newpos]=x;
                flag=1;
                break;
            }
        }
    }
    return flag;
}


int main()
{
    int x;
    x=foldinghash(1234,100);
    printf("%d",x);
    x=midsquarehash(1234,100);
    printf("%d",x);

    int key,ts=15;
    int n;
    int tablelp[15]={0};
    printf("enter no of elements to store");
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        printf("%d",i);
        printf("  ");
        printf("\n");
    }
    for(int i=0;i<=ts-1;i++)
    {
        printf("%d",tablelp[i]);
        printf("  ");
    }
    return 0;
}
